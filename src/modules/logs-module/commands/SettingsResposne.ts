import prisma from "@/db/prisma";
import { SnowflakeColors, SnowflakeLanguage } from "@/enums";
import { SnowflakeMentionType } from "@/enums/SnowflakeMentionType";
import { mention } from "@/utils/functions/mentions";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  CommandInteraction,
  EmbedBuilder,
  Guild,
  StringSelectMenuBuilder,
} from "discord.js";

export async function settingsResponse(
  interaction: CommandInteraction | ButtonInteraction
) {
  const settings = await prisma.logSettings.findFirst({
    where: { guildId: interaction.guild.id },
    include: { guild: true },
  });
  const embed = new EmbedBuilder()
    .setTitle(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ${interaction.guild.name}`)
    .setColor(SnowflakeColors.DEFAULT)
    .setFields(
      {
        name: `> Message logs`,
        value: mention(
          settings.message,
          SnowflakeMentionType.CHANNEL,
          settings.guild.language as SnowflakeLanguage
        ),
        inline: true,
      },
      {
        name: `> Voice logs`,
        value: mention(
          settings.voice,
          SnowflakeMentionType.CHANNEL,
          settings.guild.language as SnowflakeLanguage
        ),
        inline: true,
      },
      {
        name: `> Role actions logs`,
        value: mention(
          settings.roles,
          SnowflakeMentionType.CHANNEL,
          settings.guild.language as SnowflakeLanguage
        ),
        inline: true,
      },
      {
        name: `> Member logs`,
        value: mention(
          settings.members,
          SnowflakeMentionType.CHANNEL,
          settings.guild.language as SnowflakeLanguage
        ),
        inline: false,
      }
    )
    .setFooter({
      text: interaction.guild.name,
      iconURL: interaction.guild.iconURL() || null,
    })
    .setThumbnail(interaction.user.displayAvatarURL());

  const refreshButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId(`logsrefresh`)
      .setEmoji("üîÉ")
      .setStyle(ButtonStyle.Secondary)
  );

  const logSelect =
    new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(
      new StringSelectMenuBuilder()
        .setCustomId(`logSelect`)
        .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–æ–≤`)
        .setOptions(
          {
            label: `–°–æ–æ–±—â–µ–Ω–∏—è`,
            value: `message`,
            description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
            emoji: "üì©",
          },
          {
            label: `–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã`,
            value: "voice",
            description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
            emoji: "üé§",
          },
          {
            label: `–î–µ–π—Å—Ç–≤–∏—è —Å —Ä–æ–ª—è–º–∏`,
            value: "roles",
            description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —Ä–æ–ª—è–º–∏",
            emoji: "üé≠",
          },
          {
            label: `–£—á–∞—Å—Ç–Ω–∏–∫–∏`,
            value: "members",
            description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
            emoji: "üë•",
          }
        )
    );
  return {
    embeds: [embed],
    components: [logSelect, refreshButton],
  };
}

import { SnowflakeColors, SnowflakeLanguage } from "@/enums";
import { SnowflakeMentionType } from "@/enums/SnowflakeMentionType";
import { LogModuleModel } from "@/models/LogsModel";
import { mentionOrNot } from "@/utils/functions/mentions";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  CommandInteraction,
  EmbedBuilder,
  Guild,
  StringSelectMenuBuilder,
} from "discord.js";

export async function settingsResponse(
  interaction: CommandInteraction | ButtonInteraction
) {
  const settings = await LogModuleModel.findOne({
    guildId: interaction.guild.id,
  });
  const embed = new EmbedBuilder()
    .setTitle(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ${interaction.guild.name}`)
    .setColor(SnowflakeColors.DEFAULT)
    .setFields(
      {
        name: `> –õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π`,
        value: mentionOrNot(settings.messages, SnowflakeMentionType.CHANNEL),
        inline: true,
      },
      {
        name: `> –õ–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`,
        value: mentionOrNot(settings.voice, SnowflakeMentionType.CHANNEL),
        inline: true,
      },
      {
        name: `> –õ–æ–≥–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`,
        value: mentionOrNot(settings.joins, SnowflakeMentionType.CHANNEL),
        inline: true,
      },
      {
        name: `> –õ–æ–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`,
        value: mentionOrNot(settings.members, SnowflakeMentionType.CHANNEL),
        inline: true,
      }
    )
    .setFooter({
      text: interaction.guild.name,
      iconURL: interaction.guild.iconURL() || null,
    })
    .setThumbnail(interaction.user.displayAvatarURL());

  const refreshButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId(`logsrefresh`)
      .setEmoji("üîÉ")
      .setStyle(ButtonStyle.Secondary)
  );
  const options = [
    {
      label: `–°–æ–æ–±—â–µ–Ω–∏—è`,
      value: `messages`,
      description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
      emoji: "üì©",
    },
    {
      label: `–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã`,
      value: "voice",
      description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
      emoji: "üé§",
    },
    // {
    //   label: `–î–µ–π—Å—Ç–≤–∏—è —Å —Ä–æ–ª—è–º–∏`,
    //   value: "roles",
    //   description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —Ä–æ–ª—è–º–∏",
    //   emoji: "üé≠",
    // },
    {
      label: `–í—Ö–æ–¥-–≤—ã—Ö–æ–¥`,
      value: "joins",
      description: "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
      emoji: "üë•",
    },
    {
      label: `–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞`,
      value: `members`,
      description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π/–Ω–∏–∫–Ω–µ–π–º–∞/–∞–≤–∞—Ç–∞—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞`,
      emoji: "üîØ",
    },
  ];
  const select = new StringSelectMenuBuilder()
    .setCustomId(`logSelect`)
    .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–æ–≤`)
    .setMinValues(1)
    .setMaxValues(options.length)
    .setOptions(options);
  const logSelectRow =
    new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(select);
  return {
    embeds: [embed],
    components: [logSelectRow, refreshButton],
  };
}

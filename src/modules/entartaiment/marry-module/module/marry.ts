import BaseCommand from "@/abstractions/BaseCommand";
import { MarryModel } from "@/db/models/economy/MaryModel";
import { SnowflakeColors, SnowflakeType } from "@/enums";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  CommandInteraction,
  ComponentType,
  EmbedBuilder,
  SlashCommandBuilder,
  userMention,
} from "discord.js";

export class MarryCommand extends BaseCommand {
  constructor() {
    super({
      builder: new SlashCommandBuilder()
        .setName(`marry`)
        .setDescription(`–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è`)
        .addUserOption((option) =>
          option
            .setName(`user`)
            .setDescription(`–ñ–µ–ª–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
            .setRequired(true)
        ),
      type: SnowflakeType.Everyone,
      isSlash: true,
    });
  }

  async execute(interaction: CommandInteraction) {
    const user = interaction.options.get("user").user;
    if (user.bot && !global.developers.includes(interaction.user.id)) return;
    const existedMarry = await MarryModel.findOne({
      guildId: interaction.guild.id,
      $or: [
        {
          partner1Id: user.id,
        },
        {
          partner2Id: user.id,
        },
        {
          partner1Id: interaction.user.id,
        },
        {
          partner2Id: interaction.user.id,
        },
      ],
    });
    if (existedMarry)
      return interaction.reply({
        content: `–í—ã –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **—É–∂–µ** —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö`,
        ephemeral: true,
      });
    const embed = new EmbedBuilder()
      .setTitle(`–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π`)
      .setColor(SnowflakeColors.DEFAULT)
      .setTimestamp(new Date())
      .setThumbnail(interaction.user.displayAvatarURL())
      .setDescription(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userMention(
          interaction.user.id
        )} –∂–µ–ª–∞–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userMention(
          user.id
        )}\n\n –ß—Ç–æ —Å–∫–∞–∂–µ—à—å, ${userMention(user.id)} ?`
      );
    const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId(`accept_${user.id}`)
        .setLabel(`–ü—Ä–∏–Ω—è—Ç—å`)
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId(`decline_${user.id}`)
        .setLabel(`–û—Ç–∫–ª–æ–Ω–∏—Ç—å`)
        .setStyle(ButtonStyle.Danger)
    );
    const repl = await interaction.reply({
      components: [buttons],
      embeds: [embed],
    });

    const collector = repl.createMessageComponentCollector({
      filter: (i) =>
        i.user.id === user.id ||
        global.developers.includes(interaction.user.id),
      componentType: ComponentType.Button,
    });

    collector.on("collect", async (inter) => {
      await inter.deferUpdate();
      if (inter.customId.includes("accept")) {
        inter.editReply({
          embeds: [
            embed.setDescription(
              `–ü–æ–∑–¥—Ä–∞–≤–∏–º ${userMention(interaction.user.id)} –∏ ${userMention(
                user.id
              )} —Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è üéâ`
            ),
          ],
          components: [],
        });
        await MarryModel.create({
          guildId: inter.guild.id,
          partner1Id: interaction.user.id,
          partner2Id: user.id,
        });
      } else {
        inter.editReply({
          embeds: [
            embed.setDescription(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userMention(
                user.id
              )} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è`
            ),
          ],
          components: [],
        });
      }
    });
  }
}
